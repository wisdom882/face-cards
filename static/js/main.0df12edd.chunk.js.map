{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","person","id","alt","name","email","CardList","persons","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","a","fetch","response","json","personsData","this","setState","filterPersons","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,OAAOC,GAAvC,0BAAmEC,IAAI,aAC/E,6BAAKL,EAAMG,OAAOG,OAClB,4BAAIN,EAAMG,OAAOI,YCHZC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAW,YAAhB,SAEMD,EAAMS,QAAQC,KAAI,SAAAP,GAAM,OAClB,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOC,WCLrBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SACZb,UAAU,SACVW,YAAaA,EACbG,SAAYF,MC+BDG,E,kDA/Bb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,QAAS,GACTS,YAAa,IAJJ,E,4FAQb,8BAAAC,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAE4BA,EAASC,OAFrC,OAEQC,EAFR,OAGEC,KAAKC,SAAS,CAAEhB,QAASc,IAH3B,gD,0EAMA,WAAS,IAAD,SACuBC,KAAKP,MAA5BR,EADA,EACAA,QAASS,EADT,EACSA,YACTQ,EAAgBjB,EAAQkB,QAAQ,SAAAxB,GAAM,OAAIA,EAAOG,KAAKsB,cAAcC,SAASX,EAAYU,kBAC/F,OACE,sBAAK3B,UAAU,MAAf,UACE,4CACA,cAAC,EAAD,CACAW,YAAY,iBACZC,aAAgB,SAAAiB,GAAI,EAAKL,SAAS,CAACP,YAAaY,EAAEC,OAAOC,WAEzD,cAAC,EAAD,CAAUvB,QAASiB,W,GAzBTO,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0df12edd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.person.id}?set=set2&size=180x180`} alt=\"monsters\"/>\r\n        <h2>{props.person.name}</h2>\r\n        <p>{props.person.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props  =>  (\r\n    <div className =\"card-list\">\r\n         {\r\n          props.persons.map(person => (\r\n                <Card key={person.id} person={person} />\r\n          ))\r\n        }\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input type=\"search\"\r\n    className=\"search\"\r\n    placeholder={placeholder}\r\n    onChange= { handleChange}/>\r\n)","import { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      persons: [],\n      searchField: ''\n    }\n  }\n\n  async componentDidMount (){\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const personsData = await response.json();\n    this.setState({ persons: personsData });\n  }\n\n  render(){\n    const{persons, searchField}= this.state;\n    const filterPersons = persons.filter( person => person.name.toLowerCase().includes(searchField.toLowerCase()));\n    return(\n      <div className=\"App\">\n        <h1>Face Cards</h1>\n        <SearchBox \n        placeholder=\"search persons\"\n        handleChange = {e=>{this.setState({searchField: e.target.value})}}\n        />\n        <CardList persons={filterPersons} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}